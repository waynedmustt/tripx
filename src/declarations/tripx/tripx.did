type tripX_NFT = 
 service {
   extensions: () -> (vec Extension) query;
   getMinter: () -> (principal) query;
   getRegistry: () -> (vec record {
                             TokenIndex;
                             AccountIdentifier__1;
                           }) query;
   getTokens: () -> (vec record {
                           TokenIndex;
                           Metadata;
                         }) query;
   mintNFT: (MintRequest) -> (TokenIndex);
   setMinter: (principal) -> ();
   transfer: (TransferRequest) -> (TransferResponse);
 };
type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TokenIndex = nat32;
type TokenIdentifier = text;
type SubAccount = vec nat8;
type MintRequest = 
 record {
   metadata: opt blob;
   to: User;
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
type Extension = text;
type Balance = nat;
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : (principal) -> tripX_NFT
