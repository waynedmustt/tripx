type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TokenIndex = nat32;
type TokenIdentifier = text;
type SubAccount = vec nat8;
type MintRequest = 
 record {
   metadata: opt blob;
   to: User;
 };
type Memo = blob;
type Extension = text;
type Balance = nat;
type AccountIdentifier = text;
service : {
  extensions: () -> (vec Extension) query;
  getMinter: () -> (principal) query;
  greet: (text) -> (text);
  mintNFT: (MintRequest) -> (TokenIndex);
  setMinter: (principal) -> ();
  transfer: (TransferRequest) -> (TransferResponse);
}
